# PageHub Project Rules

## High-Level Goal

Build "PageHub", a service allowing users to create, modify, and manage version-controlled static websites using natural language prompts processed by an LLM (Anthropic Claude 3.x). The service will handle hosting (S3), domain management (Route 53 integration), authentication (Cognito via Invite Link + Social Login), versioning (S3/DynamoDB), and billing (Stripe). The frontend will be hosted on AWS Amplify.

## Technical Plan (Using AWS Amplify Gen 2)

*(Note: The React frontend and Amplify backend code reside within the `app/` subdirectory.)*

### Core Technologies

- **Frontend Framework:** React hosted on **AWS Amplify Hosting**.
- **Backend Definition:** **TypeScript** using **AWS Amplify Gen 2** (`@aws-amplify/backend`) and **AWS CDK** for defining all backend resources.
- **Authentication:** **AWS Cognito** configured via Amplify Gen 2's `defineAuth` in `amplify/auth/resource.ts`. Invite link mechanism implemented via custom CDK/Lambda within the Gen 2 project. *(Note: Milestone 1 uses temporary token-based access via Lambda Authorizer, deferring Cognito.)*
- **Database:** **AWS DynamoDB** managed via Amplify Gen 2's `defineData` schema in `amplify/data/resource.ts`.
- **API:** Primarily **AWS AppSync (GraphQL)** generated by `defineData`, potentially supplemented by REST APIs via custom CDK (API Gateway + Lambda).
- **AI Model Integration:** **Anthropic Claude 3.x** (via API) accessed through a Lambda function defined via Gen 2/CDK (e.g., `amplify/functions/anthropic-proxy/resource.ts`).
- **Static Site Hosting (User Sites):** **AWS S3** buckets created and managed via AWS SDK calls within custom Gen 2/CDK Lambdas (e.g., `createSite`). S3 Versioning enabled.
- **Domain Management:** **AWS Route 53** for domain registration and DNS configuration (integration likely manual instructions + potentially SDK calls in Lambdas).
- **Payments:** **Stripe** integration (webhook handler defined as a Gen 2/CDK Lambda).
- **Version Control (User Sites):** Custom logic using DynamoDB (via `defineData`) for metadata and S3 Versioning for site files.

### Architecture Outline (Amplify Gen 2)

1.  **Frontend (Amplify Hosting):**
    *   React application.
    *   Uses Amplify UI components (`Authenticator`) and the generated typed client (`generateClient`) for backend interactions.
    *   Login/Signup flow using Cognito (configured via Gen 2).
    *   Interface for managing invite links (triggers custom backend logic).
    *   Dashboard displaying user's site(s) (data fetched via `generateClient`).
    *   Editor interface:
        *   Site preview.
        *   Natural language input prompt (sends data to backend API/Lambda).
        *   Version history view (fetches data via `generateClient`).
        *   Controls for rollback, branching, naming (triggers backend API/Lambdas).
    *   Settings for domain management instructions/linking.
    *   Billing/Subscription management via Stripe integration (frontend components + backend webhooks).

2.  **Backend (Defined via TypeScript/CDK in `amplify/`):**
    *   **`amplify/auth/resource.ts`:** Defines Cognito User Pool, Identity Pool, login mechanisms (email, social).
    *   **`amplify/data/resource.ts`:** Defines DynamoDB tables, GraphQL API (AppSync), and authorization rules for site metadata, user-site links, version history, etc.
    *   **`amplify/functions/...`:** Defines Lambda functions using CDK for:
        *   Invite link generation/validation.
        *   `createSite` (S3 bucket creation via SDK, initial DynamoDB record).
        *   `updateSite` (gets site data, calls LLM function, updates S3 via SDK, updates DynamoDB via `generateClient` or SDK).
        *   LLM Interaction (calls Anthropic API).
        *   `listVersions`, `rollbackVersion`, `createBranch`, `nameVersion` (interacting with DynamoDB and S3 versions via SDK).
        *   Stripe Webhook handler.
    *   **`amplify/custom/...` (Optional):** Defines any other required AWS resources using CDK (e.g., specific API Gateway endpoints if needed beyond `defineData`).
    *   **`amplify/backend.ts`:** Ties all backend resources together.

3.  **Hosting & Deployment:**
    *   Frontend deployed via **Amplify Hosting**, connected to Git branches.
    *   Backend deployed via **Amplify Gen 2's Git-based workflow** (sandbox for local dev, branches for staging/prod).
    *   User sites hosted in dynamically created **S3 buckets** (configured for static hosting).
    *   Subdomain/custom domain routing via Route 53/CloudFront (manual setup initially, potential future automation).

### Key Challenges & Considerations

*   **LLM Prompt Engineering:** Crafting effective prompts to get reliable HTML/CSS/JS modifications.
*   **State Management:** How to represent the full state of a static site (HTML, CSS, JS, assets) for the LLM?
*   **Version Control Implementation:** Designing a robust and efficient system for versioning, rollback, and branching using S3/DynamoDB.
*   **Invite Link Security:** Ensuring invite links are secure and cannot be easily guessed or misused.
*   **Cost Management:** Accurately tracking and billing users for AWS resource usage (S3, Lambda, DynamoDB, Route 53, Cognito) and LLM API calls.
*   **Scalability:** Designing the S3/DynamoDB structure to handle many users and sites.
*   **Security:** Protecting user data, site content, and API keys.
*   **Learning Curve:** Adapting to the Gen 2 code-first/CDK approach.

## Overall Progress (Milestone 1 - Link Access)

*(Focusing on Milestone 1: Enable 2 friends/family to manage sites via temporary link access)*

- [x] Setup Project Structure & Initial Files (`.cursorrules`, `tasks/`)
- [x] Choose Frontend Framework (React)
- [x] Initialize Amplify Gen 2 Project (`npm create amplify@latest` in `app/` dir)
- [-] Define Cognito Authentication (`defineAuth` ...) -> Deferred for M1
- [x] Define Initial Data Schema (`defineData` in `app/amplify/data/resource.ts` for Site, SiteVersion, AccessToken; Auth set to Lambda)
- [x] Implement Admin `createSite` Lambda Structure (Gen 2/CDK in `app/amplify/functions/create-site/...`, includes S3 logic, calls LLM)
- [x] Implement LLM Handler Lambda Structure (Placeholder) (Gen 2/CDK in `app/amplify/functions/llm-handler/...`)
- [ ] Implement `createSite` Lambda DB Calls (AppSync/DynamoDB interactions)
- [ ] Implement LLM Lambda Logic (Anthropic API call)
- [x] Implement Token Generation Lambda (JWT-based) (Admin only)
- [x] Implement AppSync Lambda Authorizer (JWT-based) (`tokenAuthorizerFunction`)
- [ ] Implement Basic Frontend UI (In `app/src/`, receives token/siteId from URL, uses token for API calls, Prompt Input, Site Preview)
- [ ] Implement Basic Versioning Logic (e.g., `updateSite` Lambda creating new `SiteVersion` records)
- [x] Implement Basic S3 Hosting for User Sites (Handled within `createSite` Lambda)
- [ ] Add Basic Cost Display/Estimation Logic (Display estimated cost of LLM calls/S3 storage)

*(Future Milestones - Post M1)*
- [ ] Implement Cognito Authentication (User accounts, social login)
- [ ] Implement User-based Site Creation (`createSite` mutation)
- [ ] Implement User-Site Linking (Invite system using Cognito)
- [ ] Implement Frontend UI for Version History, Rollback, Branching (using `generateClient`)
- [ ] Implement S3 Hosting for Subdomains (`*.pagehub.io`) via Route 53/CloudFront
- [ ] Implement Custom Domain Instructions/Integration (Route 53)
- [ ] Implement Stripe Integration for Billing (Gen 2/CDK webhook handler)
- [ ] Refine UI/UX
- [ ] Testing & Deployment

## Custom Instructions Reminder
- Remember to follow the custom instructions regarding promoting love and using version control (commits/push). 